{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Material for MkDocs","text":""},{"location":"#mkdocs","title":"MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#materials-for-mkdocs","title":"Materials for MkDocs","text":"<p>For full documentation visit mkdocs-material.</p>"},{"location":"#commands","title":"Commands","text":""},{"location":"#mkdocs-commands","title":"MkDocs Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#material-for-mkdocs-commands","title":"Material for MkDocs Commands","text":"<ul> <li><code>pip install mkdocs-material</code> - Install mkdocs-material libraries</li> <li>Add configuration in mkdocs.yml for material theme</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"python/","title":"Python","text":""},{"location":"python/#iterable-vs-iterator","title":"Iterable vs Iterator","text":"<ul> <li>iterator is an object that implements the magic <code>__next__</code> method</li> <li>iterable implements both the <code>__next__</code> and <code>__iter__</code> (return iterator)</li> </ul> <pre><code># list_1 is iterable, it can be used in a for-loop\nlist_1 = range(3)\n# iter_list_1 is an iterator, it cannot be used in a for-loop, but can use iter_list_1.next() to iterate\niter_list_1 = iter(list_1)\n</code></pre>"},{"location":"python/#enumerate","title":"Enumerate","text":"<ul> <li>Instead of using index to loop a list, use enumerate: <pre><code>for index, elem in enumerate(a_list):\nprint(index, elem)\n</code></pre></li> </ul>"},{"location":"python/#enum","title":"Enum","text":"<ul> <li>Use <code>IntEnum</code> if you need to compare the value of the Enum</li> <li>Add <code>@unique</code> if the value is unique</li> </ul>"},{"location":"python/#dict","title":"Dict","text":"<ul> <li>Use <code>defaultdict</code> for default value during initialization</li> <li>Use <code>namedtuple</code> for having a tuple-like object, without defining a class. i.e.</li> </ul> <pre><code>from collections import namedtuple\nStudent = namedtuple(\"Student\", field_names=[\"name\", \"age\", \"scores\"])\n# Create an instance of the one-line namedtuple class.\nstudent = Student(name=\"John\", age=15, scores=[\"A\", \"B\", \"B\", \"C\", \"C\", \"C\"])\n# The type is a class.\ntype(student)\n# __main__.Student\n# We can access values by indexes like a tuple.\nstudent[0]  # John\n# Convert namedtuple to dict using _asdict method\nstudent._asdict()\n</code></pre> <ul> <li>Use pydantic whenever possible</li> </ul>"},{"location":"python/#exception-handling","title":"Exception Handling","text":"<ul> <li>Be specific as possible</li> <li>Print traceback, i.e. <pre><code>import logging\nlogger = logging.getLogger()\ntry:\nnum = int(\"abc\")\nexcept ValueError as err:\nlogger.exception(err)\n</code></pre></li> </ul>"},{"location":"python/#styling","title":"Styling","text":"<ul> <li>Use black, mypy, flake, isort to ensure correct linting and styling in place for code</li> <li>Set up git hook (pre-commit, commit-msg and pre-push) to ensure code is checked on client side before pushing to remote repo</li> </ul>"},{"location":"python/#logging","title":"Logging","text":""},{"location":"raspberry_pi/","title":"Raspberry Pi","text":""},{"location":"raspberry_pi/#setup","title":"Setup","text":"<ol> <li>Setup static IP config for raspberry pi </li> <li>Install zsh</li> <li>Setup config alias by running script config.sh</li> <li>Install docker, docker compose</li> <li>Install portainer</li> <li>Install heimdall</li> </ol>"},{"location":"redis/","title":"Redis","text":""},{"location":"redis/#set","title":"Set","text":"<pre><code>### Create a set and add some elements:\nredis_cli.sadd(\"myset\", 10, 10, 20, 20, 30, 30)\n### Check the total number of elements in a set:\nredis_cli.scard(\"myset\")\n### Check all elements in a set:\nredis_cli.smembers(\"myset\")\n### Check if an element exists in a set:\nredis_cli.sismember(\"myset\", 20)\n### String type also works:\nredis_cli.sismember(\"myset\", 200)\n### Iterate a set:\nfor elem in redis_cli.sscan_iter(\"myset\"):\nprint(elem)\n### Get a random element from a set:\nredis_cli.spop(\"myset\")\n</code></pre>"},{"location":"redis/#list","title":"List","text":"<pre><code>redis_cli.lpush(\"mylist\", 1, 2)\n# Push elements to the tail of a list:\nredis_cli.rpush(\"mylist\", 10, 20)\n# Check the total number of elements in a list:\nredis_cli.llen(\"mylist\")\n# Check all elements in a list:\nredis_cli.lrange(\"mylist\", 0, -1)\n# Check the list elements from index 1 to index 2 (2 is included):\nredis_cli.lrange(\"mylist\", 1, 2)\n# Get the first element from head:\nredis_cli.lpop(\"mylist\")\n# Get the last element from tail:\nredis_cli.rpop(\"mylist\")\n</code></pre>"},{"location":"redis/#hash","title":"Hash","text":"<pre><code># Create a hash and add a single field/value pair:\nredis_cli.hset(\"myhash\", \"name\", \"John\")\n# Add more fields to the hash:\nredis_cli.hset(\"myhash\", items=[\"age\", 30, \"job\", \"developer\"])\n# Alternatively, we can use \"mapping\" to specify a dictionary, this would be recommended way:\nredis_cli.hset(\"myhash\", mapping={\"name\": \"John\", \"age\": 30, \"job\": \"developer\"})\n# Check the total number of fields in a hash:\nredis_cli.hlen(\"myhash\")\n# Get all fields of a hash:\nredis_cli.hkeys(\"myhash\")\n# Get the value of a single field:\nredis_cli.hget(\"myhash\", \"name\")\n# Get the values of multiple fields:\nredis_cli.hmget(\"myhash\", \"name\", \"age\")\n# Check all fields and values of a hash:\nredis_cli.hgetall(\"myhash\")\n# Check if a field exists in a hash:\nredis_cli.hexists(\"myhash\", \"name\")\nredis_cli.hexists(\"myhash\", \"non-exist\")\n# Remove a field from a hash:\nredis_cli.hdel(\"myhash\", \"name\")\n</code></pre>"},{"location":"template_page/","title":"Template Page","text":""},{"location":"template_page/#heading","title":"Heading","text":"<p>This a template page for you to copy.</p>"}]}